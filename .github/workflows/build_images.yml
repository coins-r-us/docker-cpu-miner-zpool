---
name: 'build images'
concurrency:
  group: build-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

on:
  push:
#    paths:
#      - Dockerfile
#      - .github/workflows/build.yml
    branches:
      - 'master'
      - 'main'
#  schedule:
#    - cron: '4 2 * * *'


jobs:
  action_cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 3

  docker:
    #runs-on: ubuntu-latest
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          #DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/${GITHUB_REPOSITORY#*/}
          DOCKER_IMAGE=${{ secrets.DOCKER_ORG }}/${{ secrets.DOCKER_REPO }}
          docker pull $DOCKER_IMAGE
          VERSION=latest
          SHORTREF=${GITHUB_SHA::8}
          # If this is git tag, use the tag name as a docker tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${SHORTREF}"
          # If the VERSION looks like a version number, assume that
          # this is the most recent version of the image and also
          # tag it 'latest'.
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          # Set output parameters.
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          #platforms: linux/amd64,linux/arm64,linux/ppc64le
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=registry,ref=${{ steps.prep.outputs.docker_image }}:buildcache
          cache-to:   type=registry,ref=${{ steps.prep.outputs.docker_image }}:buildcache,mode=max
      - name: Sleep for few seconds
        run: sleep 10
        shell: bash
      - uses: actions/delete-package-versions@v4
        name: delete non-build containers
        with: 
          package-name: "${{ github.event.repository.name }}"
          package-type: 'container'
          min-versions-to-keep: 4
          delete-only-untagged-versions: 'true'
          ignore-versions: '.*(buildcache|baseimage|builder)(|.*)'
          #token: ${{ secrets.PACKAGE_TOKEN }}
          token: ${{ github.token }}
